# app/views/magic/index.html.effigy

class TransformIndexView < Effigy::Rails::View
  

  #metodo que sobrescreve Effigy::View::transform e aplica as regras ao template
  def transform

# TODO: setar o template do Effigy para @page.file.path
    
#    file = File.open(@page.file.path)
#    temp_string = ""
#    file.each { |line| temp_string.concat(line.to_s) }
#    file.close
#    @current_context = Nokogiri::HTML::Document.new(temp_string)
    
    @rules.each do |rule|                       # itera sobre as regras
      
      result = case rule.option
        # clona qualquer elemento selecionado... tá capenga  
        when 'clone' then 
          rule.css_selector.split(',').each { |one_selector|
            clone(normalize_rule(one_selector), rule.value, rule.text)
          }         
        else # case
        
          if rule.text.empty? then              # elimina itens com texto em branco
            remove(rule.css_selector)
          elsif (!rule.value.nil?) then
            text(rule.css_selector, rule.text)
            attr(rule.css_selector, 'href', rule.value)
          else
            text(rule.css_selector, rule.text)
          end
      end # case       
    end # .each
    # puts output
 end  # transform
  
  
  def clone(css_select, value, new_text)
    
    select(css_select).each do |node|
      
      attributes = ''
      node.attributes().each { |k,v|
        attributes.concat(k + "=\"" + v + "\"")
      }
      
      new_content = ''
      if Rule::STRUCTURAL_TAGS.include?(node.name) then
##        new_content = "<#{node.name} #{attributes}>#{node.inner_html}</#{node.name}>"
##        if (!value.nil?) then
        new_node = node.clone
         
        # verifica se o nodo filho é do tipo a para inserir correspondente link 
        if (node.child.name != 'a') && (!value.nil?) then
          new_node.child.set_attribute('href', value)
        end
        
        # insere texto dado no novo duplicado
        if (!new_text.nil?) then
          insert_content(new_node, new_text)
        end
           
        node.after(new_node)
      
      elsif Rule::FORMATTING_TAGS.include?(node.name) then
      end
      
    end
  end

# Chamada recursiva para inserir conteúdo (texto) no nodo dado.
# O conteúdo deve ser inserido no último nodo filho.
  def insert_content(node, new_content)
  
    if node.children.empty? then
      node.content=(new_content)
    else
      insert_content(node.child, new_content)
    end
    node
    
  end


# retira vírgulas e espaços em branco ao final de um seletor CSS 
# (usado quando uma regra tem mais de um seletor separados com vírgulas)
  def normalize_rule(s)
    size = s.size
    if (s[size - 1].chr == ',') then
      s.chop!
    end
    s.strip!
    return s
  end
  
end

